name: Salesforce CI/CD Pipeline

on:
  push:
    branches:
      - master
      - PreProd
      - staging
      - feature/**
      - staging-deploy/**

env:
  TEST_RUN_FLAG: "RunLocalTests"
  PRE_DESTRUCTIVE_PATH: "force-app/manifest/destructiveChangesPre.xml"
  POST_DESTRUCTIVE_PATH: "force-app/manifest/destructiveChangesPost.xml"
  WAIT_TIME: 180
  SALESFORCE_LOGIN_URL: "https://test.salesforce.com"

jobs:
  US_Sandbox_Deployment:
    runs-on: ubuntu-latest

    steps:
      - name: Retrieve repository source code.
        uses: actions/checkout@v3

      - name: Initialize Node.js environment.
        uses: actions/setup-node@v3.0.0

      - name: Install Salesforce CLI.
        run: npm install -g @salesforce/cli

      - name: Set environment variables based on branch or developer
        run: |
          echo "Dynamically setting environment variables based on the branch or developer GitHub username..."

          BRANCH=$(echo "${{ github.ref }}" | sed 's/refs\/heads\///')  

          if [[ "$BRANCH" == "PreProd" || "$BRANCH" == "master" || "$BRANCH" == "staging" || "$BRANCH" == "fullcopy" ]]; then
            echo "Deploying to $BRANCH environment..."
            if [ "$BRANCH" == "staging" ]; then
              echo "SANDBOX_CLIENT_ID=${{ secrets.SFDC_STAGING_CLIENT_ID }}" >> $GITHUB_ENV
              echo "SANDBOX_USERNAME=${{ secrets.SFDC_STAGING_USERNAME }}" >> $GITHUB_ENV
              echo "SANDBOX_ORG_ALIAS=Staging" >> $GITHUB_ENV
              echo "TEST_RUN_FLAG=NoTestRun" >> $GITHUB_ENV
            elif [ "$BRANCH" == "PreProd" ]; then
              echo "SANDBOX_CLIENT_ID=${{ secrets.SFDC_PRE_PROD_CLIENT_ID }}" >> $GITHUB_ENV
              echo "SANDBOX_USERNAME=${{ secrets.SFDC_PRE_PROD_USERNAME }}" >> $GITHUB_ENV
              echo "SANDBOX_ORG_ALIAS=PreProd" >> $GITHUB_ENV
            elif [ "$BRANCH" == "fullcopy" ]; then
              echo "SANDBOX_CLIENT_ID=${{ secrets.SFDC_FULL_COPY_CLIENT_ID }}" >> $GITHUB_ENV
              echo "SANDBOX_USERNAME=${{ secrets.SFDC_FULL_COPY_USERNAME }}" >> $GITHUB_ENV
              echo "SANDBOX_ORG_ALIAS=FullCopy" >> $GITHUB_ENV
              echo "TEST_RUN_FLAG=NoTestRun" >> $GITHUB_ENV
            elif [ "$BRANCH" == "master" ]; then
              echo "SANDBOX_CLIENT_ID=${{ secrets.SFDC_PRODUCTION_CLIENT_ID }}" >> $GITHUB_ENV
              echo "SANDBOX_USERNAME=${{ secrets.SFDC_PRODUCTION__USERNAME }}" >> $GITHUB_ENV
              echo "SANDBOX_ORG_ALIAS=Production" >> $GITHUB_ENV
              echo "SALESFORCE_LOGIN_URL=https://login.salesforce.com" >> $GITHUB_ENV
            fi
          else
            echo "Deploying to developer sandbox..."

            ACTOR=$(echo "${{ github.actor }}" | tr '[:lower:]-' '[:upper:]_')
            echo "Using credentials for $ACTOR...."

            if [ "$ACTOR" == "FKLEINMAN" ]; then
              echo "SANDBOX_CLIENT_ID=${{ secrets.SFDC_FKLEINMAN_CLIENT_ID }}" >> $GITHUB_ENV
              echo "SANDBOX_USERNAME=${{ secrets.SFDC_FKLEINMAN_USERNAME }}" >> $GITHUB_ENV
              echo "SANDBOX_ORG_ALIAS=${{ secrets.SFDC_FKLEINMAN_SANDBOX_ALIAS }}" >> $GITHUB_ENV
              echo "TEST_RUN_FLAG=NoTestRun" >> $GITHUB_ENV
            elif [ "$ACTOR" == "GERONIMO_OLIVERA" ]; then
              echo "SANDBOX_CLIENT_ID=${{ secrets.SFDC_GERONIMO_CLIENT_ID }}" >> $GITHUB_ENV
              echo "SANDBOX_USERNAME=${{ secrets.SFDC_GERONIMO_USERNAME }}" >> $GITHUB_ENV
              echo "SANDBOX_ORG_ALIAS=${{ secrets.SFDC_GERONIMO_SANDBOX_ALIAS }}" >> $GITHUB_ENV
              echo "TEST_RUN_FLAG=NoTestRun" >> $GITHUB_ENV
            elif [ "$ACTOR" == "VIKTOR" ]; then
              echo "SANDBOX_CLIENT_ID=${{ secrets.SFDC_VIKTOR_CLIENT_ID }}" >> $GITHUB_ENV
              echo "SANDBOX_USERNAME=${{ secrets.SFDC_VIKTOR_USERNAME }}" >> $GITHUB_ENV
              echo "SANDBOX_ORG_ALIAS=${{ secrets.SFDC_VIKTOR_SANDBOX_ALIAS }}" >> $GITHUB_ENV
              echo "TEST_RUN_FLAG=NoTestRun" >> $GITHUB_ENV
            elif [ "$ACTOR" == "DENISE" ]; then
              echo "SANDBOX_CLIENT_ID=${{ secrets.SFDC_DENISE_CLIENT_ID }}" >> $GITHUB_ENV
              echo "SANDBOX_USERNAME=${{ secrets.SFDC_DENISE_USERNAME }}" >> $GITHUB_ENV
              echo "SANDBOX_ORG_ALIAS=${{ secrets.SFDC_DENISE_SANDBOX_ALIAS }}" >> $GITHUB_ENV
              echo "TEST_RUN_FLAG=NoTestRun" >> $GITHUB_ENV
            else
              echo "Developer credentials not found. Skipping deployment."
              exit 1
            fi
          fi

      - name: Authenticate to Org.
        run: |
          echo "${{ secrets.SFDC_JWT_SECRET_KEY_STAGING }}" > server.key
          sfdx force:auth:jwt:grant --client-id $SANDBOX_CLIENT_ID --username $SANDBOX_USERNAME --jwt-key-file server.key --instance-url $SALESFORCE_LOGIN_URL --alias $SANDBOX_ORG_ALIAS
          rm server.key

      - name: Generate and verify package.xml.
        run: |
          sf project generate manifest -p force-app
           if [ -f "package.xml" ]; then
            echo "package.xml generated successfully."
          else
            echo "Error: package.xml not found."
            exit 1
          fi
          echo "Content to deploy of package.xml:"
          cat package.xml

      - name: Verify Pre Destructive Changes.
        run: |
          if [ -f "$PRE_DESTRUCTIVE_PATH" ]; then
            echo "destructiveChangesPre.xml found."
            echo "Content of destructiveChangesPre.xml:"
            cat $PRE_DESTRUCTIVE_PATH
          else
            echo "Error: Pre-destructive changes file not found."
          fi

      - name: Verify Post Destructive Changes.
        run: |
          if [ -f "$POST_DESTRUCTIVE_PATH" ]; then
            echo "destructiveChangesPost.xml found."
            echo "Content of destructiveChangesPost.xml:"
            cat $POST_DESTRUCTIVE_PATH
          else
            echo "Error: Post-destructive changes file not found."
          fi

      - name: Deploy Metadata.
        run: |
          sf deploy metadata \
           --manifest package.xml \
           --pre-destructive-changes $PRE_DESTRUCTIVE_PATH \
           --post-destructive-changes $POST_DESTRUCTIVE_PATH \
           --target-org $SANDBOX_ORG_ALIAS \
           --wait $WAIT_TIME \
           --test-level $TEST_RUN_FLAG
