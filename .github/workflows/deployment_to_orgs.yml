name: Salesforce CI/CD Pipeline

on:
  push:
    branches:
      - feature-jorge/**
      - staging-deploy/**
      - preprod-deploy/**
      - fullcopy-deploy/**
      - master-deploy/**
  pull_request:
    branches:
      - staging
      - preprod
      - fullcopy
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout source code
        uses: actions/checkout@v3

      # Step 2: Setup NPM
      - name: Setup NPM
        uses: actions/setup-node@v3.0.0

      # Step 3: Install Salesforce CLI
      - name: Install SFDX
        run: npm install -g @salesforce/cli

      # Step 4: Set environment variables for developer sandbox or environment
      - name: Set environment variables based on branch or developer
        run: |
          echo "Dynamically setting environment variables based on the branch and GitHub username (${GITHUB_ACTOR})"

          BRANCH=$(echo "${GITHUB_REF##*/}") # Get the current branch name

          if [[ "$BRANCH" == "preprod" || "$BRANCH" == "master" || "$BRANCH" == "staging" || "$BRANCH" == "fullcopy" ]]; then
            echo "Deploying to $BRANCH environment..."
            if [ "$BRANCH" == "staging" ]; then
              echo "SANDBOX_CLIENT_ID=${{ secrets.SFDC_STAGING_CLIENT_ID }}" >> $GITHUB_ENV
              echo "SANDBOX_USERNAME=${{ secrets.SFDC_STAGING_USERNAME }}" >> $GITHUB_ENV
              echo "SANDBOX_DX_ALIAS=Staging" >> $GITHUB_ENV
            elif [ "$BRANCH" == "preprod" ]; then
              echo "SANDBOX_CLIENT_ID=${{ secrets.SFDC_PREPROD_CLIENT_ID }}" >> $GITHUB_ENV
              echo "SANDBOX_USERNAME=${{ secrets.SFDC_PREPROD_USERNAME }}" >> $GITHUB_ENV
              echo "SANDBOX_DX_ALIAS=PreProd" >> $GITHUB_ENV
            elif [ "$BRANCH" == "fullcopy" ]; then
              echo "SANDBOX_CLIENT_ID=${{ secrets.SFDC_FULLCOPY_CLIENT_ID }}" >> $GITHUB_ENV
              echo "SANDBOX_USERNAME=${{ secrets.SFDC_FULLCOPY_USERNAME }}" >> $GITHUB_ENV
              echo "SANDBOX_DX_ALIAS=FullCopy" >> $GITHUB_ENV
            elif [ "$BRANCH" == "master" ]; then
              echo "SANDBOX_CLIENT_ID=${{ secrets.SFDC_PROD_CLIENT_ID }}" >> $GITHUB_ENV
              echo "SANDBOX_USERNAME=${{ secrets.SFDC_PROD_USERNAME }}" >> $GITHUB_ENV
              echo "SANDBOX_DX_ALIAS=Production" >> $GITHUB_ENV
            fi
          else
            echo "Deploying to developer sandbox..."

            # Convert GitHub actor to uppercase and replace '-' with '_'
            ACTOR=$(echo "${{ github.actor }}" | tr '[:lower:]-' '[:upper:]_')

            if [ "$ACTOR" == "FKLEINMAN" ]; then
              echo "SANDBOX_CLIENT_ID=${{ secrets.SFDC_FKLEINMAN_CLIENT_ID }}" >> $GITHUB_ENV
              echo "SANDBOX_USERNAME=${{ secrets.SFDC_FKLEINMAN_USERNAME }}" >> $GITHUB_ENV
              echo "SANDBOX_DX_ALIAS=${{ secrets.SFDC_FKLEINMAN_SANDBOX_ALIAS }}" >> $GITHUB_ENV
            elif [ "$ACTOR" == "GERONIMO" ]; then
              echo "SANDBOX_CLIENT_ID=${{ secrets.SFDC_GERONIMO_USERNAME_CLIENT_ID }}" >> $GITHUB_ENV
              echo "SANDBOX_USERNAME=${{ secrets.SFDC_GERONIMO_USERNAME }}" >> $GITHUB_ENV
              echo "SANDBOX_DX_ALIAS=${{ secrets.SFDC_GERONIMO_SANDBOX_ALIAS }}" >> $GITHUB_ENV
            elif [ "$ACTOR" == "VIKTOR" ]; then
              echo "SANDBOX_CLIENT_ID=${{ secrets.SFDC_VIKTOR_USERNAME_CLIENT_ID }}" >> $GITHUB_ENV
              echo "SANDBOX_USERNAME=${{ secrets.SFDC_VIKTOR_USERNAME }}" >> $GITHUB_ENV
              echo "SANDBOX_DX_ALIAS=${{ secrets.SFDC_VIKTOR_SANDBOX_ALIAS }}" >> $GITHUB_ENV
            elif [ "$ACTOR" == "DENISE" ]; then
              echo "SANDBOX_CLIENT_ID=${{ secrets.SFDC_DENISE_USERNAME_CLIENT_ID }}" >> $GITHUB_ENV
              echo "SANDBOX_USERNAME=${{ secrets.SFDC_DENISE_USERNAME }}" >> $GITHUB_ENV
              echo "SANDBOX_DX_ALIAS=${{ secrets.SFDC_DENISE_SANDBOX_ALIAS }}" >> $GITHUB_ENV
            else
              echo "Developer credentials not found. Skipping deployment."
              exit 1
            fi
          fi

      # Step 5: Authenticate Org
      - name: Authenticate Org
        run: |
          echo "${{ secrets.SALESFORCE_JWT_SECRET_KEY }}" > server.key
          sfdx force:auth:jwt:grant --client-id $SANDBOX_CLIENT_ID --username $SANDBOX_USERNAME --jwt-key-file server.key --instance-url https://test.salesforce.com --alias $SANDBOX_DX_ALIAS
          rm server.key

      # Step 6: Debugging Step - List all files in the repository
      - name: List files in the working directory
        run: ls -al

      # Step 7: Pre-Deploy Destructive Changes
      - name: Pre-Deploy Destructive Changes
        run: |
          if [ -f "destructiveChangesPre.xml" ]; then
            echo "Deploying pre-deploy destructive changes..."
            sfdx force:source:deploy -x destructiveChangesPre.xml --targetusername $SANDBOX_DX_ALIAS
          else
            echo "No pre-deploy destructive changes found."
          fi

      # Step 8: Deploy to Salesforce environment
      - name: Deploy to Salesforce
        run: sf project deploy start --source-dir force-app --target-org $SANDBOX_DX_ALIAS

      # Step 9: Post-Deploy Destructive Changes
      - name: Post-Deploy Destructive Changes
        run: |
          if [ -f "destructiveChangesPost.xml" ]; then
            echo "Deploying post-deploy destructive changes..."
            sfdx force:source:deploy -x destructiveChangesPost.xml --targetusername $SANDBOX_DX_ALIAS
          else
            echo "No post-deploy destructive changes found."
          fi
